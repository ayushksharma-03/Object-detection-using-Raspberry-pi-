import cv2
import numpy as np
import time
from picamera2 import Picamera2
import smtplib
from email.message import EmailMessage
import os
from datetime import datetime

# Load model
net = cv2.dnn.readNetFromCaffe("mobilenet_ssd.prototxt", "mobilenet_ssd.caffemodel")
CLASSES = ["background", "aeroplane", "bicycle", "bird", "boat",
           "bottle", "bus", "car", "cat", "chair", "cow", "diningtable",
           "dog", "horse", "motorbike", "person", "pottedplant", "sheep",
           "sofa", "train", "tvmonitor"]

# Email configuration
EMAIL_ADDRESS = "your_email@gmail.com"
EMAIL_PASSWORD = "your_16_char_app_password"
TO_EMAIL = "recipient_email@example.com"

def send_email(subject, body, image_path=None):
    msg = EmailMessage()
    msg['Subject'] = subject
    msg['From'] = EMAIL_ADDRESS
    msg['To'] = TO_EMAIL
    msg.set_content(body)

    if image_path:
        with open(image_path, 'rb') as img:
            msg.add_attachment(img.read(), maintype='image', subtype='jpeg', filename=os.path.basename(image_path))

    with smtplib.SMTP_SSL('smtp.gmail.com', 465) as smtp:
        smtp.login(EMAIL_ADDRESS, EMAIL_PASSWORD)
        smtp.send_message(msg)

# Setup Pi Camera
picam2 = Picamera2()
picam2.preview_configuration.main.size = (640, 480)
picam2.preview_configuration.main.format = "RGB888"
picam2.configure("preview")
picam2.start()

# Tracking variables
person_detected = False
person_start_time = None
person_alert_delay = 3  # seconds
person_alert_sent = False

while True:
    frame = picam2.capture_array()
    h, w = frame.shape[:2]

    # Timestamp overlay
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    cv2.putText(frame, timestamp, (10, h - 10),
                cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 1)

    blob = cv2.dnn.blobFromImage(cv2.resize(frame, (300, 300)), 
                                 0.007843, (300, 300), 127.5)
    net.setInput(blob)
    detections = net.forward()

    detected_person = False

    for i in range(detections.shape[2]):
        confidence = detections[0, 0, i, 2]
        if confidence > 0.5:
            idx = int(detections[0, 0, i, 1])
            label = CLASSES[idx]
            box = detections[0, 0, i, 3:7] * np.array([w, h, w, h])
            (x1, y1, x2, y2) = box.astype("int")

            cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 255, 0), 2)
            cv2.putText(frame, f"{label}: {confidence:.2f}", (x1, y1 - 10),
                        cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)

            # Text notification for every detection
            send_email("Detection Alert", f"{label} detected with {confidence:.2f} confidence.")

            if label == "person":
                detected_person = True

    # Handle person detection over time
    if detected_person:
        if person_start_time is None:
            person_start_time = time.time()
        elif time.time() - person_start_time >= person_alert_delay and not person_alert_sent:
            # Save snapshot
            snapshot_path = f"person_snapshot_{int(time.time())}.jpg"
            cv2.imwrite(snapshot_path, frame)

            # Send email with snapshot
            send_email("Person Detected (3s+)", "A person was detected for more than 3 seconds.", snapshot_path)
            person_alert_sent = True
    else:
        person_start_time = None
        person_alert_sent = False

    # Show window
    cv2.imshow("Live Feed", frame)

    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Cleanup
cv2.destroyAllWindows()
picam2.close()
