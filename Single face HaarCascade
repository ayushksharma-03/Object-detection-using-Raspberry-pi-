# Importing required Libraries.
import cv2
import numpy as np
import matplotlib.pyplot as plt

# Loading Haar Cascade Classifiers
face_cascade = cv2.CascadeClassifier("/content/haarcascade_frontalface_default.xml")
eye_cascade = cv2.CascadeClassifier("/content/haarcascade_eye.xml")

# Function to detect faces
def adjusted_detect_face(img):
    face_img = img.copy()
    face_rect = face_cascade.detectMultiScale(face_img, scaleFactor=1.2, minNeighbors=5)

    for (x, y, w, h) in face_rect:
        cv2.rectangle(face_img, (x, y), (x + w, y + h), (255, 255, 255), 10)

    return face_img

# Function to detect eyes
def detect_eyes(img):
    eye_img = img.copy()
    eye_rect = eye_cascade.detectMultiScale(eye_img, scaleFactor=1.2, minNeighbors=5)

    for (x, y, w, h) in eye_rect:
        cv2.rectangle(eye_img, (x, y), (x + w, y + h), (255, 255, 255), 10)

    return eye_img

# Load an image
img = cv2.imread("/content/andrew.jpg")
img_copy1 = img.copy()
img_copy2 = img.copy()
img_copy3 = img.copy()

# Display original image
plt.imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))
plt.title("Original Image")
plt.axis('off')
plt.show()

# Face Detection
face = adjusted_detect_face(img_copy1)
plt.imshow(cv2.cvtColor(face, cv2.COLOR_BGR2RGB))
plt.title("Face Detection")
plt.axis('off')
plt.show()
cv2.imwrite('face.jpg', face)

# Eyes Detection
eyes = detect_eyes(img_copy2)
plt.imshow(cv2.cvtColor(eyes, cv2.COLOR_BGR2RGB))
plt.title("Eyes Detection")
plt.axis('off')
plt.show()
cv2.imwrite('eyes.jpg', eyes)

# Face and Eyes Detection (Face detection only, as eyes in full image may overlap with non-eye areas)
eyes_face = adjusted_detect_face(img_copy3)
plt.imshow(cv2.cvtColor(eyes_face, cv2.COLOR_BGR2RGB))
plt.title("Face and Eyes Detection")
plt.axis('off')
plt.show()
cv2.imwrite('face+eyes.jpg', eyes_face)
